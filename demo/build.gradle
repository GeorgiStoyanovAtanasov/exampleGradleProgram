plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.0'
	id 'io.spring.dependency-management' version '1.1.5'
	id("org.springdoc.openapi-gradle-plugin") version "1.8.0"
	id "org.sonarqube" version "4.4.1.3373"
	id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(20)
	}
}

jacoco {
	toolVersion = '0.8.8'  // specify the version of JaCoCo you want to use
}

repositories {
	mavenCentral()
	gradlePluginPortal()
	google()
}

ext {
	set('springCloudVersion', "2023.0.2")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.apache.httpcomponents:httpclient:4.5.13'
	implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.5.0'
	runtimeOnly 'mysql:mysql-connector-java:8.0.30'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
sonar {
	properties {
		property "sonar.projectKey", "GeorgiStoyanovAtanasov_exampleGradleProgram"
		property "sonar.organization", "georgistoyanovatanasov"
		property "sonar.host.url", "https://sonarcloud.io"
	}
}
sonarqube {
	properties {
		property "sonar.gradle.skipCompile", "true"
	}
}
tasks.withType(Test) {
	finalizedBy(tasks.jacocoTestReport) // ensure the test report is generated after tests run
}
tasks.jacocoTestReport {
	dependsOn test // ensure tests are run before generating the report
	reports {
		xml.required = true
		html.required = true
		csv.required = false
	}
}
test {
	useJUnitPlatform()
	finalizedBy(jacocoTestReport)  // Ensure the JaCoCo report is generated after tests
}


